def hand_extraction (sourceImage):

    # Constants for finding range of skin color in YCrCb
    min_YCrCb = np.array([0,133,77],np.uint8)
    max_YCrCb = np.array([255,173,127],np.uint8)
   
    #detect face and put dark sheet in front of it
    face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
    gray = cv2.cvtColor(sourceImage, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    for (x,y,w,h) in faces:
        sourceImage = cv2.rectangle(sourceImage,(x,y),(x+w+30,y+h+50),(0,0,0),-1)
        roi_gray = sourceImage[y:y+h, x:x+w]
        roi_color = sourceImage[y:y+h, x:x+w]
       
    # Convert image to YCrCb
    imageYCrCb = cv2.cvtColor(sourceImage,cv2.COLOR_BGR2YCR_CB)

    # Find region with skin tone in YCrCb image
    skinRegion = cv2.inRange(imageYCrCb,min_YCrCb,max_YCrCb)
    
    # Do contour detection on skin region and choosing the one with max area
    contours, hierarchy = cv2.findContours(skinRegion, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    contour_info=[]
    for c in contours:
        contour_info.append((
            c,
            cv2.contourArea(c),
        ))
    contour_info = sorted(contour_info, key=lambda contour_info:contour_info[1], reverse=True)
    max_contour = contour_info[0]

    #Draw bounding rectangele for the contour
    x,y,w,h = cv2.boundingRect(max_contour[0])
    cv2.rectangle(sourceImage, (x, y), (x + w + 40, y + h), (0, 255,0), 2)
    new_img=sourceImage[y:y+h,x:x+w+40]
    return new_img
